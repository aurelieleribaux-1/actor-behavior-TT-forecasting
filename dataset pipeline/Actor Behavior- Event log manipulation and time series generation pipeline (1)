{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1G3B7E2nCL15s9CLUeGIp22iXlHjabfXm","timestamp":1752252174345},{"file_id":"1SAs9wZg9jBTkRg_HLQkl6lRdjuDREZNg","timestamp":1744031323720},{"file_id":"1xmu9L5HEGN2fdSOzWywXtqJljWjnfYzi","timestamp":1741593880801}],"machine_shape":"hm","authorship_tag":"ABX9TyPxq4+9l26tpPUR6BsqStOD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"6817b3a0b23743faa2a290ba8a62c629":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_cfc359dbff0e41c2b80a2df3c8b8a8cd","IPY_MODEL_2587c2a8afb44cee9c866d51999d661e","IPY_MODEL_43404e66fdfb4c6eb85ee1ea43fc836e"],"layout":"IPY_MODEL_0271e86fc7a94882aa04826368291805"}},"cfc359dbff0e41c2b80a2df3c8b8a8cd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1cdcc5e901a34e319b0d963b2da8da55","placeholder":"​","style":"IPY_MODEL_d33a449a52e04224948ca8d5ab30dda0","value":"parsing log, completed traces :: 100%"}},"2587c2a8afb44cee9c866d51999d661e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_096b0362012242faab07d5a54ceea83d","max":31509,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f6dc9d1fa7e44e46becdd37fa75a8323","value":31509}},"43404e66fdfb4c6eb85ee1ea43fc836e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_950bf3a1ae8e4170b70d81b1dbfb71ee","placeholder":"​","style":"IPY_MODEL_5fbde796bc684d0b82d3ef2720303c27","value":" 31509/31509 [01:11&lt;00:00, 501.49it/s]"}},"0271e86fc7a94882aa04826368291805":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1cdcc5e901a34e319b0d963b2da8da55":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d33a449a52e04224948ca8d5ab30dda0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"096b0362012242faab07d5a54ceea83d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f6dc9d1fa7e44e46becdd37fa75a8323":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"950bf3a1ae8e4170b70d81b1dbfb71ee":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5fbde796bc684d0b82d3ef2720303c27":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ba7616ed133c46779d592d28bbf4896c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_202e390a991441568fcecfbb690b2a0f","IPY_MODEL_72dade69619e442b9b12bc8bb1bf5528","IPY_MODEL_69f7bd4b490c4d8f8fcda5d8594858e0"],"layout":"IPY_MODEL_4b4e387536694b0aab32e764ccdf8b69"}},"202e390a991441568fcecfbb690b2a0f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d738321cc8194498bf549042565810cf","placeholder":"​","style":"IPY_MODEL_df097bf3220c491db8261496452dd0e8","value":"parsing log, completed traces :: 100%"}},"72dade69619e442b9b12bc8bb1bf5528":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8c112497bd02469eba1d0c25b6ecb551","max":13087,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8e8f300804964740845e4c5b90453314","value":13087}},"69f7bd4b490c4d8f8fcda5d8594858e0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8034de94a86b4531be3dd6b52563ee0d","placeholder":"​","style":"IPY_MODEL_115f2fecdf8640b09df9459859d0aff1","value":" 13087/13087 [00:07&lt;00:00, 1866.32it/s]"}},"4b4e387536694b0aab32e764ccdf8b69":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d738321cc8194498bf549042565810cf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df097bf3220c491db8261496452dd0e8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8c112497bd02469eba1d0c25b6ecb551":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8e8f300804964740845e4c5b90453314":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8034de94a86b4531be3dd6b52563ee0d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"115f2fecdf8640b09df9459859d0aff1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8a9d07fbce7d4fa2941a1be002407648":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_23534f00bc544de1a5cb87bfd30d6128","IPY_MODEL_573acc07c47241908a6fe041c9f2e15b","IPY_MODEL_7e2cced4714e49caac4e1a606e134f8e"],"layout":"IPY_MODEL_05b3a4848d444e3baaab466530ce5a39"}},"23534f00bc544de1a5cb87bfd30d6128":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_495370c407234d9b96ffbdf82d50eed7","placeholder":"​","style":"IPY_MODEL_11b4d652753841ebb8dc3bb97e8bf3e2","value":"parsing log, completed traces :: 100%"}},"573acc07c47241908a6fe041c9f2e15b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_91a17e49209c4d57adc308b2fd16560c","max":251734,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5a1c02f598314c48b75ff5e4758241d6","value":251734}},"7e2cced4714e49caac4e1a606e134f8e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ecdb4620242444928837ddc76ffce092","placeholder":"​","style":"IPY_MODEL_f5ecd538ca0d444b831e741346e86037","value":" 251734/251734 [00:59&lt;00:00, 6078.33it/s]"}},"05b3a4848d444e3baaab466530ce5a39":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"495370c407234d9b96ffbdf82d50eed7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"11b4d652753841ebb8dc3bb97e8bf3e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"91a17e49209c4d57adc308b2fd16560c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5a1c02f598314c48b75ff5e4758241d6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ecdb4620242444928837ddc76ffce092":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5ecd538ca0d444b831e741346e86037":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d22d33d3b4f1404ebdb81b1f737b4058":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_87363b5f384046889c0cfdd19d8f40a5","IPY_MODEL_7648daa1734641ccb5f87a8c94ff0abc","IPY_MODEL_3c6ce10e0e294285b03c6ee09e71349f"],"layout":"IPY_MODEL_94ba13e0fae84fdf828f22d5081a8cd9"}},"87363b5f384046889c0cfdd19d8f40a5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ee61bff16fd54efcba21a7f29f5d9c01","placeholder":"​","style":"IPY_MODEL_c269f3f7968940cdbe812d908c2c24b7","value":"parsing log, completed traces :: 100%"}},"7648daa1734641ccb5f87a8c94ff0abc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0c4079bd022141cb8034da85b73ddaf6","max":1143,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a33b6b19c57f4033961f599438fd3cff","value":1143}},"3c6ce10e0e294285b03c6ee09e71349f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_146881ed7fe74a23a15817cab47f2fe0","placeholder":"​","style":"IPY_MODEL_a48031f61c4e40a7b29c24f1615d2172","value":" 1143/1143 [00:09&lt;00:00, 140.74it/s]"}},"94ba13e0fae84fdf828f22d5081a8cd9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ee61bff16fd54efcba21a7f29f5d9c01":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c269f3f7968940cdbe812d908c2c24b7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0c4079bd022141cb8034da85b73ddaf6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a33b6b19c57f4033961f599438fd3cff":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"146881ed7fe74a23a15817cab47f2fe0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a48031f61c4e40a7b29c24f1615d2172":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"dc88bc4437e44ff2bce2bbcd4924dcdd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d435fe73dedc4b7b9507cd9a6b9c7dd7","IPY_MODEL_0b8934f053e34b6296df047fdb27bf69","IPY_MODEL_94ed601b12d84179b66ad20920986640"],"layout":"IPY_MODEL_797241bc4d9e42f798f89e141da6d652"}},"d435fe73dedc4b7b9507cd9a6b9c7dd7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_de76164f494e4e5ab4e9a09bffb47f21","placeholder":"​","style":"IPY_MODEL_608ea231a84547f8b3a5104908984c46","value":"parsing log, completed traces :: 100%"}},"0b8934f053e34b6296df047fdb27bf69":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_09f868e3afef4ac5b237bbe233bad92b","max":251734,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5229a8233c6b45a982aaba3e668690e7","value":251734}},"94ed601b12d84179b66ad20920986640":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_54fc68d018ba48de98962c2d02da3b2e","placeholder":"​","style":"IPY_MODEL_6861711b79dc459faeffc06c2c7152b3","value":" 251734/251734 [01:02&lt;00:00, 6271.97it/s]"}},"797241bc4d9e42f798f89e141da6d652":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"de76164f494e4e5ab4e9a09bffb47f21":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"608ea231a84547f8b3a5104908984c46":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"09f868e3afef4ac5b237bbe233bad92b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5229a8233c6b45a982aaba3e668690e7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"54fc68d018ba48de98962c2d02da3b2e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6861711b79dc459faeffc06c2c7152b3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"lXKLh0lXJsku","executionInfo":{"status":"ok","timestamp":1753200888716,"user_tz":-120,"elapsed":9268,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4d7cb9ba-a53d-43fc-885b-e66c1f07f962"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pm4py\n","  Downloading pm4py-2.7.16-py3-none-any.whl.metadata (4.8 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Collecting deprecation (from pm4py)\n","  Downloading deprecation-2.1.0-py2.py3-none-any.whl.metadata (4.6 kB)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from pm4py) (3.5)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.11/dist-packages (from pm4py) (0.21)\n","Requirement already satisfied: wheel in /usr/local/lib/python3.11/dist-packages (from pm4py) (0.45.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from pm4py) (75.2.0)\n","Collecting intervaltree (from pm4py)\n","  Downloading intervaltree-3.1.0.tar.gz (32 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: lxml in /usr/local/lib/python3.11/dist-packages (from pm4py) (5.4.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from pm4py) (3.10.0)\n","Requirement already satisfied: pydotplus in /usr/local/lib/python3.11/dist-packages (from pm4py) (2.0.2)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.11/dist-packages (from pm4py) (2025.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from pm4py) (1.15.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from pm4py) (4.67.1)\n","Requirement already satisfied: cvxopt in /usr/local/lib/python3.11/dist-packages (from pm4py) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from deprecation->pm4py) (25.0)\n","Requirement already satisfied: sortedcontainers<3.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from intervaltree->pm4py) (2.4.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pm4py) (3.2.3)\n","Downloading pm4py-2.7.16-py3-none-any.whl (2.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m53.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading deprecation-2.1.0-py2.py3-none-any.whl (11 kB)\n","Building wheels for collected packages: intervaltree\n","  Building wheel for intervaltree (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for intervaltree: filename=intervaltree-3.1.0-py2.py3-none-any.whl size=26098 sha256=eb6886b9b0fb44270a4199b23d43be9943aed557136871eece61170c3c4e16f7\n","  Stored in directory: /root/.cache/pip/wheels/31/d7/d9/eec6891f78cac19a693bd40ecb8365d2f4613318c145ec9816\n","Successfully built intervaltree\n","Installing collected packages: intervaltree, deprecation, pm4py\n","Successfully installed deprecation-2.1.0 intervaltree-3.1.0 pm4py-2.7.16\n"]}],"source":["!pip install pm4py pandas numpy\n"]},{"cell_type":"markdown","source":["BPIC2017\n"],"metadata":{"id":"3iuS118m68Uv"}},{"cell_type":"code","source":["import pm4py\n","import pandas as pd\n","from google.colab import files\n","\n","uploaded = files.upload()\n","\n","log = pm4py.read_xes(\"BPI Challenge 2017.xes.gz\")\n","df = pm4py.convert_to_dataframe(log)\n","\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399,"referenced_widgets":["6817b3a0b23743faa2a290ba8a62c629","cfc359dbff0e41c2b80a2df3c8b8a8cd","2587c2a8afb44cee9c866d51999d661e","43404e66fdfb4c6eb85ee1ea43fc836e","0271e86fc7a94882aa04826368291805","1cdcc5e901a34e319b0d963b2da8da55","d33a449a52e04224948ca8d5ab30dda0","096b0362012242faab07d5a54ceea83d","f6dc9d1fa7e44e46becdd37fa75a8323","950bf3a1ae8e4170b70d81b1dbfb71ee","5fbde796bc684d0b82d3ef2720303c27"]},"id":"7bmktrOL9bgm","outputId":"98a9ad68-e3db-46e9-a8a8-21960a343971","executionInfo":{"status":"ok","timestamp":1752245020156,"user_tz":-120,"elapsed":277229,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-c7cf1a99-c343-46c4-bd8d-fd1a1d69e6d1\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-c7cf1a99-c343-46c4-bd8d-fd1a1d69e6d1\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving BPI Challenge 2017.xes.gz to BPI Challenge 2017.xes (1).gz\n"]},{"output_type":"display_data","data":{"text/plain":["parsing log, completed traces ::   0%|          | 0/31509 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6817b3a0b23743faa2a290ba8a62c629"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["        Action org:resource            concept:name  EventOrigin  \\\n","0      Created       User_1    A_Create Application  Application   \n","1  statechange       User_1             A_Submitted  Application   \n","2      Created       User_1          W_Handle leads     Workflow   \n","3      Deleted       User_1          W_Handle leads     Workflow   \n","4      Created       User_1  W_Complete application     Workflow   \n","\n","                 EventID lifecycle:transition          time:timestamp  \\\n","0  Application_652823628             complete 2016-01-01 09:51:15.304   \n","1   ApplState_1582051990             complete 2016-01-01 09:51:15.352   \n","2    Workitem_1298499574             schedule 2016-01-01 09:51:15.774   \n","3    Workitem_1673366067             withdraw 2016-01-01 09:52:36.392   \n","4    Workitem_1493664571             schedule 2016-01-01 09:52:36.403   \n","\n","            case:LoanGoal case:ApplicationType      case:concept:name  \\\n","0  Existing loan takeover           New credit  Application_652823628   \n","1  Existing loan takeover           New credit  Application_652823628   \n","2  Existing loan takeover           New credit  Application_652823628   \n","3  Existing loan takeover           New credit  Application_652823628   \n","4  Existing loan takeover           New credit  Application_652823628   \n","\n","   case:RequestedAmount  FirstWithdrawalAmount  NumberOfTerms Accepted  \\\n","0               20000.0                    NaN            NaN      NaN   \n","1               20000.0                    NaN            NaN      NaN   \n","2               20000.0                    NaN            NaN      NaN   \n","3               20000.0                    NaN            NaN      NaN   \n","4               20000.0                    NaN            NaN      NaN   \n","\n","   MonthlyCost Selected  CreditScore  OfferedAmount OfferID  \n","0          NaN      NaN          NaN            NaN     NaN  \n","1          NaN      NaN          NaN            NaN     NaN  \n","2          NaN      NaN          NaN            NaN     NaN  \n","3          NaN      NaN          NaN            NaN     NaN  \n","4          NaN      NaN          NaN            NaN     NaN  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Action</th>\n","      <th>org:resource</th>\n","      <th>concept:name</th>\n","      <th>EventOrigin</th>\n","      <th>EventID</th>\n","      <th>lifecycle:transition</th>\n","      <th>time:timestamp</th>\n","      <th>case:LoanGoal</th>\n","      <th>case:ApplicationType</th>\n","      <th>case:concept:name</th>\n","      <th>case:RequestedAmount</th>\n","      <th>FirstWithdrawalAmount</th>\n","      <th>NumberOfTerms</th>\n","      <th>Accepted</th>\n","      <th>MonthlyCost</th>\n","      <th>Selected</th>\n","      <th>CreditScore</th>\n","      <th>OfferedAmount</th>\n","      <th>OfferID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Created</td>\n","      <td>User_1</td>\n","      <td>A_Create Application</td>\n","      <td>Application</td>\n","      <td>Application_652823628</td>\n","      <td>complete</td>\n","      <td>2016-01-01 09:51:15.304</td>\n","      <td>Existing loan takeover</td>\n","      <td>New credit</td>\n","      <td>Application_652823628</td>\n","      <td>20000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>statechange</td>\n","      <td>User_1</td>\n","      <td>A_Submitted</td>\n","      <td>Application</td>\n","      <td>ApplState_1582051990</td>\n","      <td>complete</td>\n","      <td>2016-01-01 09:51:15.352</td>\n","      <td>Existing loan takeover</td>\n","      <td>New credit</td>\n","      <td>Application_652823628</td>\n","      <td>20000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Created</td>\n","      <td>User_1</td>\n","      <td>W_Handle leads</td>\n","      <td>Workflow</td>\n","      <td>Workitem_1298499574</td>\n","      <td>schedule</td>\n","      <td>2016-01-01 09:51:15.774</td>\n","      <td>Existing loan takeover</td>\n","      <td>New credit</td>\n","      <td>Application_652823628</td>\n","      <td>20000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Deleted</td>\n","      <td>User_1</td>\n","      <td>W_Handle leads</td>\n","      <td>Workflow</td>\n","      <td>Workitem_1673366067</td>\n","      <td>withdraw</td>\n","      <td>2016-01-01 09:52:36.392</td>\n","      <td>Existing loan takeover</td>\n","      <td>New credit</td>\n","      <td>Application_652823628</td>\n","      <td>20000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Created</td>\n","      <td>User_1</td>\n","      <td>W_Complete application</td>\n","      <td>Workflow</td>\n","      <td>Workitem_1493664571</td>\n","      <td>schedule</td>\n","      <td>2016-01-01 09:52:36.403</td>\n","      <td>Existing loan takeover</td>\n","      <td>New credit</td>\n","      <td>Application_652823628</td>\n","      <td>20000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["BPIC2012"],"metadata":{"id":"9o-y_CpE7Bxz"}},{"cell_type":"code","source":["import pm4py\n","import pandas as pd\n","from google.colab import files\n","\n","uploaded = files.upload()\n","\n","# Lees de event log\n","log = pm4py.read_xes(\"BPI_Challenge_2012.xes.gz\")\n","df = pm4py.convert_to_dataframe(log)\n","\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":361,"referenced_widgets":["ba7616ed133c46779d592d28bbf4896c","202e390a991441568fcecfbb690b2a0f","72dade69619e442b9b12bc8bb1bf5528","69f7bd4b490c4d8f8fcda5d8594858e0","4b4e387536694b0aab32e764ccdf8b69","d738321cc8194498bf549042565810cf","df097bf3220c491db8261496452dd0e8","8c112497bd02469eba1d0c25b6ecb551","8e8f300804964740845e4c5b90453314","8034de94a86b4531be3dd6b52563ee0d","115f2fecdf8640b09df9459859d0aff1"]},"id":"FanejF3KfASm","executionInfo":{"status":"ok","timestamp":1753200954650,"user_tz":-120,"elapsed":65930,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"23e6aea6-1a94-4df9-b726-a29c64c92dff"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/cudf/utils/gpu_utils.py:75: UserWarning: Failed to dlopen libcuda.so.1\n","  warnings.warn(str(e))\n","/usr/local/lib/python3.11/dist-packages/cudf/pandas/__init__.py:64: UserWarning: Function \"cuInit\" not found\n","  warnings.warn(str(e))\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-6a959c53-702a-4e6c-b47d-1fd908ff1fde\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-6a959c53-702a-4e6c-b47d-1fd908ff1fde\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving BPI_Challenge_2012.xes.gz to BPI_Challenge_2012.xes.gz\n"]},{"output_type":"display_data","data":{"text/plain":["parsing log, completed traces ::   0%|          | 0/13087 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba7616ed133c46779d592d28bbf4896c"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["  org:resource lifecycle:transition            concept:name  \\\n","0          112             COMPLETE             A_SUBMITTED   \n","1          112             COMPLETE       A_PARTLYSUBMITTED   \n","2          112             COMPLETE           A_PREACCEPTED   \n","3          112             SCHEDULE  W_Completeren aanvraag   \n","4          NaN                START  W_Completeren aanvraag   \n","\n","           time:timestamp           case:REG_DATE case:concept:name  \\\n","0 2011-10-01 00:38:44.546 2011-10-01 00:38:44.546            173688   \n","1 2011-10-01 00:38:44.880 2011-10-01 00:38:44.546            173688   \n","2 2011-10-01 00:39:37.906 2011-10-01 00:38:44.546            173688   \n","3 2011-10-01 00:39:38.875 2011-10-01 00:38:44.546            173688   \n","4 2011-10-01 11:36:46.437 2011-10-01 00:38:44.546            173688   \n","\n","  case:AMOUNT_REQ  \n","0           20000  \n","1           20000  \n","2           20000  \n","3           20000  \n","4           20000  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>org:resource</th>\n","      <th>lifecycle:transition</th>\n","      <th>concept:name</th>\n","      <th>time:timestamp</th>\n","      <th>case:REG_DATE</th>\n","      <th>case:concept:name</th>\n","      <th>case:AMOUNT_REQ</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>112</td>\n","      <td>COMPLETE</td>\n","      <td>A_SUBMITTED</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>173688</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>112</td>\n","      <td>COMPLETE</td>\n","      <td>A_PARTLYSUBMITTED</td>\n","      <td>2011-10-01 00:38:44.880</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>173688</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>112</td>\n","      <td>COMPLETE</td>\n","      <td>A_PREACCEPTED</td>\n","      <td>2011-10-01 00:39:37.906</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>173688</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>112</td>\n","      <td>SCHEDULE</td>\n","      <td>W_Completeren aanvraag</td>\n","      <td>2011-10-01 00:39:38.875</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>173688</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>START</td>\n","      <td>W_Completeren aanvraag</td>\n","      <td>2011-10-01 11:36:46.437</td>\n","      <td>2011-10-01 00:38:44.546</td>\n","      <td>173688</td>\n","      <td>20000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df.tail(10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"oHoMERL463RX","executionInfo":{"status":"ok","timestamp":1753200975167,"user_tz":-120,"elapsed":68,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"0f2d1442-06b1-476f-f5a6-47af74cea076"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       org:resource lifecycle:transition            concept:name  \\\n","262190        10933             SCHEDULE     W_Nabellen offertes   \n","262191        10933             COMPLETE  W_Completeren aanvraag   \n","262192        11119                START     W_Nabellen offertes   \n","262193        11119             COMPLETE     W_Nabellen offertes   \n","262194          112             COMPLETE             A_SUBMITTED   \n","262195          112             COMPLETE       A_PARTLYSUBMITTED   \n","262196          112             SCHEDULE      W_Afhandelen leads   \n","262197        11169                START      W_Afhandelen leads   \n","262198        11169             COMPLETE              A_DECLINED   \n","262199        11169             COMPLETE      W_Afhandelen leads   \n","\n","                time:timestamp           case:REG_DATE case:concept:name  \\\n","262190 2012-03-01 20:22:40.149 2012-02-29 23:43:09.766            214373   \n","262191 2012-03-01 20:22:41.157 2012-02-29 23:43:09.766            214373   \n","262192 2012-03-10 12:46:22.700 2012-02-29 23:43:09.766            214373   \n","262193 2012-03-10 12:50:54.881 2012-02-29 23:43:09.766            214373   \n","262194 2012-02-29 23:51:16.799 2012-02-29 23:51:16.799            214376   \n","262195 2012-02-29 23:51:17.423 2012-02-29 23:51:16.799            214376   \n","262196 2012-02-29 23:52:01.287 2012-02-29 23:51:16.799            214376   \n","262197 2012-03-01 09:26:46.736 2012-02-29 23:51:16.799            214376   \n","262198 2012-03-01 09:27:37.118 2012-02-29 23:51:16.799            214376   \n","262199 2012-03-01 09:27:41.325 2012-02-29 23:51:16.799            214376   \n","\n","       case:AMOUNT_REQ  \n","262190            8500  \n","262191            8500  \n","262192            8500  \n","262193            8500  \n","262194           15000  \n","262195           15000  \n","262196           15000  \n","262197           15000  \n","262198           15000  \n","262199           15000  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>org:resource</th>\n","      <th>lifecycle:transition</th>\n","      <th>concept:name</th>\n","      <th>time:timestamp</th>\n","      <th>case:REG_DATE</th>\n","      <th>case:concept:name</th>\n","      <th>case:AMOUNT_REQ</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>262190</th>\n","      <td>10933</td>\n","      <td>SCHEDULE</td>\n","      <td>W_Nabellen offertes</td>\n","      <td>2012-03-01 20:22:40.149</td>\n","      <td>2012-02-29 23:43:09.766</td>\n","      <td>214373</td>\n","      <td>8500</td>\n","    </tr>\n","    <tr>\n","      <th>262191</th>\n","      <td>10933</td>\n","      <td>COMPLETE</td>\n","      <td>W_Completeren aanvraag</td>\n","      <td>2012-03-01 20:22:41.157</td>\n","      <td>2012-02-29 23:43:09.766</td>\n","      <td>214373</td>\n","      <td>8500</td>\n","    </tr>\n","    <tr>\n","      <th>262192</th>\n","      <td>11119</td>\n","      <td>START</td>\n","      <td>W_Nabellen offertes</td>\n","      <td>2012-03-10 12:46:22.700</td>\n","      <td>2012-02-29 23:43:09.766</td>\n","      <td>214373</td>\n","      <td>8500</td>\n","    </tr>\n","    <tr>\n","      <th>262193</th>\n","      <td>11119</td>\n","      <td>COMPLETE</td>\n","      <td>W_Nabellen offertes</td>\n","      <td>2012-03-10 12:50:54.881</td>\n","      <td>2012-02-29 23:43:09.766</td>\n","      <td>214373</td>\n","      <td>8500</td>\n","    </tr>\n","    <tr>\n","      <th>262194</th>\n","      <td>112</td>\n","      <td>COMPLETE</td>\n","      <td>A_SUBMITTED</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>262195</th>\n","      <td>112</td>\n","      <td>COMPLETE</td>\n","      <td>A_PARTLYSUBMITTED</td>\n","      <td>2012-02-29 23:51:17.423</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>262196</th>\n","      <td>112</td>\n","      <td>SCHEDULE</td>\n","      <td>W_Afhandelen leads</td>\n","      <td>2012-02-29 23:52:01.287</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>262197</th>\n","      <td>11169</td>\n","      <td>START</td>\n","      <td>W_Afhandelen leads</td>\n","      <td>2012-03-01 09:26:46.736</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>262198</th>\n","      <td>11169</td>\n","      <td>COMPLETE</td>\n","      <td>A_DECLINED</td>\n","      <td>2012-03-01 09:27:37.118</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","    <tr>\n","      <th>262199</th>\n","      <td>11169</td>\n","      <td>COMPLETE</td>\n","      <td>W_Afhandelen leads</td>\n","      <td>2012-03-01 09:27:41.325</td>\n","      <td>2012-02-29 23:51:16.799</td>\n","      <td>214376</td>\n","      <td>15000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"org:resource\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"11119\",\n          \"11169\",\n          \"10933\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lifecycle:transition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"SCHEDULE\",\n          \"COMPLETE\",\n          \"START\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"concept:name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"W_Nabellen offertes\",\n          \"W_Completeren aanvraag\",\n          \"A_DECLINED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time:timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-02-29 23:51:16.799000\",\n        \"max\": \"2012-03-10 12:50:54.881000\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2012-03-01 09:27:37.118000\",\n          \"2012-03-01 20:22:41.157000\",\n          \"2012-02-29 23:51:17.423000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"case:REG_DATE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-02-29 23:43:09.766000\",\n        \"max\": \"2012-02-29 23:51:16.799000\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2012-02-29 23:51:16.799000\",\n          \"2012-02-29 23:43:09.766000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"case:concept:name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"214376\",\n          \"214373\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"case:AMOUNT_REQ\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"15000\",\n          \"8500\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["BPIC2019"],"metadata":{"id":"3BGKJ5jZ7EjB"}},{"cell_type":"code","source":["import pm4py\n","import pandas as pd\n","from google.colab import files\n","\n","uploaded = files.upload()\n","\n","log = pm4py.read_xes(\"BPI_Challenge_2019.xes\")\n","df = pm4py.convert_to_dataframe(log)\n","\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":634,"referenced_widgets":["8a9d07fbce7d4fa2941a1be002407648","23534f00bc544de1a5cb87bfd30d6128","573acc07c47241908a6fe041c9f2e15b","7e2cced4714e49caac4e1a606e134f8e","05b3a4848d444e3baaab466530ce5a39","495370c407234d9b96ffbdf82d50eed7","11b4d652753841ebb8dc3bb97e8bf3e2","91a17e49209c4d57adc308b2fd16560c","5a1c02f598314c48b75ff5e4758241d6","ecdb4620242444928837ddc76ffce092","f5ecd538ca0d444b831e741346e86037"]},"id":"FNyi3T1Aupun","executionInfo":{"status":"ok","timestamp":1753202995960,"user_tz":-120,"elapsed":1942233,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"1f4ab167-a7d3-4668-a9f3-27eaab7b525b"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-1ce6b6a1-f448-461f-a5e3-ad912a372702\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-1ce6b6a1-f448-461f-a5e3-ad912a372702\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving BPI_Challenge_2019.xes to BPI_Challenge_2019.xes\n"]},{"output_type":"display_data","data":{"text/plain":["parsing log, completed traces ::   0%|          | 0/251734 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8a9d07fbce7d4fa2941a1be002407648"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["       User org:resource                         concept:name  \\\n","0  batch_00     batch_00                         SRM: Created   \n","1  batch_00     batch_00                        SRM: Complete   \n","2  batch_00     batch_00               SRM: Awaiting Approval   \n","3  batch_00     batch_00              SRM: Document Completed   \n","4  batch_00     batch_00  SRM: In Transfer to Execution Syst.   \n","\n","   Cumulative net worth (EUR)      time:timestamp case:Spend area text  \\\n","0                       298.0 2018-01-02 12:53:00         CAPEX & SOCS   \n","1                       298.0 2018-01-02 13:53:00         CAPEX & SOCS   \n","2                       298.0 2018-01-02 13:53:00         CAPEX & SOCS   \n","3                       298.0 2018-01-02 13:53:00         CAPEX & SOCS   \n","4                       298.0 2018-01-02 13:53:00         CAPEX & SOCS   \n","\n","     case:Company case:Document Type case:Sub spend area text  \\\n","0  companyID_0000  EC Purchase order      Facility Management   \n","1  companyID_0000  EC Purchase order      Facility Management   \n","2  companyID_0000  EC Purchase order      Facility Management   \n","3  companyID_0000  EC Purchase order      Facility Management   \n","4  companyID_0000  EC Purchase order      Facility Management   \n","\n","  case:Purchasing Document  ...    case:Vendor case:Item Type  \\\n","0               2000000000  ...  vendorID_0000       Standard   \n","1               2000000000  ...  vendorID_0000       Standard   \n","2               2000000000  ...  vendorID_0000       Standard   \n","3               2000000000  ...  vendorID_0000       Standard   \n","4               2000000000  ...  vendorID_0000       Standard   \n","\n","               case:Item Category case:Spend classification text  \\\n","0  3-way match, invoice before GR                            NPR   \n","1  3-way match, invoice before GR                            NPR   \n","2  3-way match, invoice before GR                            NPR   \n","3  3-way match, invoice before GR                            NPR   \n","4  3-way match, invoice before GR                            NPR   \n","\n","           case:Source    case:Name case:GR-Based Inv. Verif.  case:Item  \\\n","0  sourceSystemID_0000  vendor_0000                     False      00001   \n","1  sourceSystemID_0000  vendor_0000                     False      00001   \n","2  sourceSystemID_0000  vendor_0000                     False      00001   \n","3  sourceSystemID_0000  vendor_0000                     False      00001   \n","4  sourceSystemID_0000  vendor_0000                     False      00001   \n","\n","  case:concept:name case:Goods Receipt  \n","0  2000000000_00001               True  \n","1  2000000000_00001               True  \n","2  2000000000_00001               True  \n","3  2000000000_00001               True  \n","4  2000000000_00001               True  \n","\n","[5 rows x 21 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User</th>\n","      <th>org:resource</th>\n","      <th>concept:name</th>\n","      <th>Cumulative net worth (EUR)</th>\n","      <th>time:timestamp</th>\n","      <th>case:Spend area text</th>\n","      <th>case:Company</th>\n","      <th>case:Document Type</th>\n","      <th>case:Sub spend area text</th>\n","      <th>case:Purchasing Document</th>\n","      <th>...</th>\n","      <th>case:Vendor</th>\n","      <th>case:Item Type</th>\n","      <th>case:Item Category</th>\n","      <th>case:Spend classification text</th>\n","      <th>case:Source</th>\n","      <th>case:Name</th>\n","      <th>case:GR-Based Inv. Verif.</th>\n","      <th>case:Item</th>\n","      <th>case:concept:name</th>\n","      <th>case:Goods Receipt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>batch_00</td>\n","      <td>batch_00</td>\n","      <td>SRM: Created</td>\n","      <td>298.0</td>\n","      <td>2018-01-02 12:53:00</td>\n","      <td>CAPEX &amp; SOCS</td>\n","      <td>companyID_0000</td>\n","      <td>EC Purchase order</td>\n","      <td>Facility Management</td>\n","      <td>2000000000</td>\n","      <td>...</td>\n","      <td>vendorID_0000</td>\n","      <td>Standard</td>\n","      <td>3-way match, invoice before GR</td>\n","      <td>NPR</td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_0000</td>\n","      <td>False</td>\n","      <td>00001</td>\n","      <td>2000000000_00001</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>batch_00</td>\n","      <td>batch_00</td>\n","      <td>SRM: Complete</td>\n","      <td>298.0</td>\n","      <td>2018-01-02 13:53:00</td>\n","      <td>CAPEX &amp; SOCS</td>\n","      <td>companyID_0000</td>\n","      <td>EC Purchase order</td>\n","      <td>Facility Management</td>\n","      <td>2000000000</td>\n","      <td>...</td>\n","      <td>vendorID_0000</td>\n","      <td>Standard</td>\n","      <td>3-way match, invoice before GR</td>\n","      <td>NPR</td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_0000</td>\n","      <td>False</td>\n","      <td>00001</td>\n","      <td>2000000000_00001</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>batch_00</td>\n","      <td>batch_00</td>\n","      <td>SRM: Awaiting Approval</td>\n","      <td>298.0</td>\n","      <td>2018-01-02 13:53:00</td>\n","      <td>CAPEX &amp; SOCS</td>\n","      <td>companyID_0000</td>\n","      <td>EC Purchase order</td>\n","      <td>Facility Management</td>\n","      <td>2000000000</td>\n","      <td>...</td>\n","      <td>vendorID_0000</td>\n","      <td>Standard</td>\n","      <td>3-way match, invoice before GR</td>\n","      <td>NPR</td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_0000</td>\n","      <td>False</td>\n","      <td>00001</td>\n","      <td>2000000000_00001</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>batch_00</td>\n","      <td>batch_00</td>\n","      <td>SRM: Document Completed</td>\n","      <td>298.0</td>\n","      <td>2018-01-02 13:53:00</td>\n","      <td>CAPEX &amp; SOCS</td>\n","      <td>companyID_0000</td>\n","      <td>EC Purchase order</td>\n","      <td>Facility Management</td>\n","      <td>2000000000</td>\n","      <td>...</td>\n","      <td>vendorID_0000</td>\n","      <td>Standard</td>\n","      <td>3-way match, invoice before GR</td>\n","      <td>NPR</td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_0000</td>\n","      <td>False</td>\n","      <td>00001</td>\n","      <td>2000000000_00001</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>batch_00</td>\n","      <td>batch_00</td>\n","      <td>SRM: In Transfer to Execution Syst.</td>\n","      <td>298.0</td>\n","      <td>2018-01-02 13:53:00</td>\n","      <td>CAPEX &amp; SOCS</td>\n","      <td>companyID_0000</td>\n","      <td>EC Purchase order</td>\n","      <td>Facility Management</td>\n","      <td>2000000000</td>\n","      <td>...</td>\n","      <td>vendorID_0000</td>\n","      <td>Standard</td>\n","      <td>3-way match, invoice before GR</td>\n","      <td>NPR</td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_0000</td>\n","      <td>False</td>\n","      <td>00001</td>\n","      <td>2000000000_00001</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["print(df.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xeFr01uwMj7W","executionInfo":{"status":"ok","timestamp":1752413224369,"user_tz":-120,"elapsed":783,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"7b86bda1-3b3e-427f-fafd-1a0cc893300e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['User', 'org:resource', 'concept:name', 'Cumulative net worth (EUR)',\n","       'time:timestamp', 'case:Spend area text', 'case:Company',\n","       'case:Document Type', 'case:Sub spend area text',\n","       'case:Purchasing Document', 'case:Purch. Doc. Category name',\n","       'case:Vendor', 'case:Item Type', 'case:Item Category',\n","       'case:Spend classification text', 'case:Source', 'case:Name',\n","       'case:GR-Based Inv. Verif.', 'case:Item', 'case:concept:name',\n","       'case:Goods Receipt'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"XgKjyl97Cz7G","executionInfo":{"status":"ok","timestamp":1753203039559,"user_tz":-120,"elapsed":689,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"eaf77444-311a-48ba-d660-a197c088f0ea"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             User org:resource                        concept:name  \\\n","1595918  user_603     user_603  Change Approval for Purchase Order   \n","1595919  user_602     user_602          Create Purchase Order Item   \n","1595920  user_603     user_603  Change Approval for Purchase Order   \n","1595921  user_602     user_602          Create Purchase Order Item   \n","1595922  user_603     user_603  Change Approval for Purchase Order   \n","\n","         Cumulative net worth (EUR)      time:timestamp case:Spend area text  \\\n","1595918                      1385.0 2019-01-17 14:00:00                        \n","1595919                      1385.0 2019-01-17 13:32:00                        \n","1595920                      1385.0 2019-01-17 14:00:00                        \n","1595921                      1385.0 2019-01-17 13:32:00                        \n","1595922                      1385.0 2019-01-17 14:00:00                        \n","\n","           case:Company case:Document Type case:Sub spend area text  \\\n","1595918  companyID_0003    Framework order                            \n","1595919  companyID_0003    Framework order                            \n","1595920  companyID_0003    Framework order                            \n","1595921  companyID_0003    Framework order                            \n","1595922  companyID_0003    Framework order                            \n","\n","        case:Purchasing Document  ...    case:Vendor case:Item Type  \\\n","1595918               4508076348  ...  vendorID_1974          Limit   \n","1595919               4508076348  ...  vendorID_1974          Limit   \n","1595920               4508076348  ...  vendorID_1974          Limit   \n","1595921               4508076348  ...  vendorID_1974          Limit   \n","1595922               4508076348  ...  vendorID_1974          Limit   \n","\n","        case:Item Category case:Spend classification text  \\\n","1595918        2-way match                                  \n","1595919        2-way match                                  \n","1595920        2-way match                                  \n","1595921        2-way match                                  \n","1595922        2-way match                                  \n","\n","                 case:Source    case:Name case:GR-Based Inv. Verif.  \\\n","1595918  sourceSystemID_0000  vendor_1898                     False   \n","1595919  sourceSystemID_0000  vendor_1898                     False   \n","1595920  sourceSystemID_0000  vendor_1898                     False   \n","1595921  sourceSystemID_0000  vendor_1898                     False   \n","1595922  sourceSystemID_0000  vendor_1898                     False   \n","\n","         case:Item case:concept:name case:Goods Receipt  \n","1595918      00090  4508076348_00090              False  \n","1595919      00100  4508076348_00100              False  \n","1595920      00100  4508076348_00100              False  \n","1595921      00110  4508076348_00110              False  \n","1595922      00110  4508076348_00110              False  \n","\n","[5 rows x 21 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User</th>\n","      <th>org:resource</th>\n","      <th>concept:name</th>\n","      <th>Cumulative net worth (EUR)</th>\n","      <th>time:timestamp</th>\n","      <th>case:Spend area text</th>\n","      <th>case:Company</th>\n","      <th>case:Document Type</th>\n","      <th>case:Sub spend area text</th>\n","      <th>case:Purchasing Document</th>\n","      <th>...</th>\n","      <th>case:Vendor</th>\n","      <th>case:Item Type</th>\n","      <th>case:Item Category</th>\n","      <th>case:Spend classification text</th>\n","      <th>case:Source</th>\n","      <th>case:Name</th>\n","      <th>case:GR-Based Inv. Verif.</th>\n","      <th>case:Item</th>\n","      <th>case:concept:name</th>\n","      <th>case:Goods Receipt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1595918</th>\n","      <td>user_603</td>\n","      <td>user_603</td>\n","      <td>Change Approval for Purchase Order</td>\n","      <td>1385.0</td>\n","      <td>2019-01-17 14:00:00</td>\n","      <td></td>\n","      <td>companyID_0003</td>\n","      <td>Framework order</td>\n","      <td></td>\n","      <td>4508076348</td>\n","      <td>...</td>\n","      <td>vendorID_1974</td>\n","      <td>Limit</td>\n","      <td>2-way match</td>\n","      <td></td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_1898</td>\n","      <td>False</td>\n","      <td>00090</td>\n","      <td>4508076348_00090</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1595919</th>\n","      <td>user_602</td>\n","      <td>user_602</td>\n","      <td>Create Purchase Order Item</td>\n","      <td>1385.0</td>\n","      <td>2019-01-17 13:32:00</td>\n","      <td></td>\n","      <td>companyID_0003</td>\n","      <td>Framework order</td>\n","      <td></td>\n","      <td>4508076348</td>\n","      <td>...</td>\n","      <td>vendorID_1974</td>\n","      <td>Limit</td>\n","      <td>2-way match</td>\n","      <td></td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_1898</td>\n","      <td>False</td>\n","      <td>00100</td>\n","      <td>4508076348_00100</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1595920</th>\n","      <td>user_603</td>\n","      <td>user_603</td>\n","      <td>Change Approval for Purchase Order</td>\n","      <td>1385.0</td>\n","      <td>2019-01-17 14:00:00</td>\n","      <td></td>\n","      <td>companyID_0003</td>\n","      <td>Framework order</td>\n","      <td></td>\n","      <td>4508076348</td>\n","      <td>...</td>\n","      <td>vendorID_1974</td>\n","      <td>Limit</td>\n","      <td>2-way match</td>\n","      <td></td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_1898</td>\n","      <td>False</td>\n","      <td>00100</td>\n","      <td>4508076348_00100</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1595921</th>\n","      <td>user_602</td>\n","      <td>user_602</td>\n","      <td>Create Purchase Order Item</td>\n","      <td>1385.0</td>\n","      <td>2019-01-17 13:32:00</td>\n","      <td></td>\n","      <td>companyID_0003</td>\n","      <td>Framework order</td>\n","      <td></td>\n","      <td>4508076348</td>\n","      <td>...</td>\n","      <td>vendorID_1974</td>\n","      <td>Limit</td>\n","      <td>2-way match</td>\n","      <td></td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_1898</td>\n","      <td>False</td>\n","      <td>00110</td>\n","      <td>4508076348_00110</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1595922</th>\n","      <td>user_603</td>\n","      <td>user_603</td>\n","      <td>Change Approval for Purchase Order</td>\n","      <td>1385.0</td>\n","      <td>2019-01-17 14:00:00</td>\n","      <td></td>\n","      <td>companyID_0003</td>\n","      <td>Framework order</td>\n","      <td></td>\n","      <td>4508076348</td>\n","      <td>...</td>\n","      <td>vendorID_1974</td>\n","      <td>Limit</td>\n","      <td>2-way match</td>\n","      <td></td>\n","      <td>sourceSystemID_0000</td>\n","      <td>vendor_1898</td>\n","      <td>False</td>\n","      <td>00110</td>\n","      <td>4508076348_00110</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["BPIC2011"],"metadata":{"id":"088Eu7Lz7Iiq"}},{"cell_type":"code","source":["import pm4py\n","import pandas as pd\n","from google.colab import files\n","\n","uploaded = files.upload()\n","\n","log = pm4py.read_xes(\"Hospital_log.xes.gz\")\n","df = pm4py.convert_to_dataframe(log)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102,"referenced_widgets":["d22d33d3b4f1404ebdb81b1f737b4058","87363b5f384046889c0cfdd19d8f40a5","7648daa1734641ccb5f87a8c94ff0abc","3c6ce10e0e294285b03c6ee09e71349f","94ba13e0fae84fdf828f22d5081a8cd9","ee61bff16fd54efcba21a7f29f5d9c01","c269f3f7968940cdbe812d908c2c24b7","0c4079bd022141cb8034da85b73ddaf6","a33b6b19c57f4033961f599438fd3cff","146881ed7fe74a23a15817cab47f2fe0","a48031f61c4e40a7b29c24f1615d2172"]},"id":"eEYA-ULqfOqm","executionInfo":{"status":"ok","timestamp":1753205560815,"user_tz":-120,"elapsed":73536,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"91ca0682-0adb-45db-813e-02a02aa189b0"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-c42092d0-7fcb-492a-815c-c1951cda9830\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-c42092d0-7fcb-492a-815c-c1951cda9830\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Hospital_log.xes.gz to Hospital_log.xes.gz\n"]},{"output_type":"display_data","data":{"text/plain":["parsing log, completed traces ::   0%|          | 0/1143 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d22d33d3b4f1404ebdb81b1f737b4058"}},"metadata":{}}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"cLwlt31L-pB1","executionInfo":{"status":"ok","timestamp":1753205560910,"user_tz":-120,"elapsed":90,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"f290cf80-79f9-4fba-8e7f-c0d01faf4e45"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         org:group  Number of executions  Specialism code  \\\n","0                     Radiotherapy                     1               61   \n","1                     Radiotherapy                     1               61   \n","2                     Nursing ward                     1                7   \n","3  Obstetrics & Gynaecology clinic                     1                7   \n","4                     Nursing ward                     1                7   \n","\n","                               concept:name Producer code    Section  \\\n","0                   1e consult poliklinisch          SRTH  Section 5   \n","1  administratief tarief       - eerste pol          SRTH  Section 5   \n","2   verlosk.-gynaec. korte kaart kosten-out          SGEH  Section 2   \n","3           echografie  - genitalia interna          SGEC  Section 2   \n","4                   1e consult poliklinisch          SGEH  Section 2   \n","\n","  Activity code time:timestamp lifecycle:transition       case:End date  ...  \\\n","0        410100     2005-01-03             complete 2006-01-04 23:45:36  ...   \n","1        419100     2005-01-03             complete 2006-01-04 23:45:36  ...   \n","2         10107     2005-01-05             complete 2006-01-04 23:45:36  ...   \n","3       339486E     2005-01-05             complete 2006-01-04 23:45:36  ...   \n","4        410100     2005-01-05             complete 2006-01-04 23:45:36  ...   \n","\n","   case:Treatment code:14  case:Treatment code:15  case:Diagnosis:15  \\\n","0                     NaN                     NaN                NaN   \n","1                     NaN                     NaN                NaN   \n","2                     NaN                     NaN                NaN   \n","3                     NaN                     NaN                NaN   \n","4                     NaN                     NaN                NaN   \n","\n","  case:Diagnosis:14  case:Diagnosis:11 case:Diagnosis:13  case:Diagnosis:12  \\\n","0               NaN                NaN               NaN                NaN   \n","1               NaN                NaN               NaN                NaN   \n","2               NaN                NaN               NaN                NaN   \n","3               NaN                NaN               NaN                NaN   \n","4               NaN                NaN               NaN                NaN   \n","\n","  case:Diagnosis code:14 case:Diagnosis code:13 case:Diagnosis code:15  \n","0                    NaN                    NaN                    NaN  \n","1                    NaN                    NaN                    NaN  \n","2                    NaN                    NaN                    NaN  \n","3                    NaN                    NaN                    NaN  \n","4                    NaN                    NaN                    NaN  \n","\n","[5 rows x 128 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>org:group</th>\n","      <th>Number of executions</th>\n","      <th>Specialism code</th>\n","      <th>concept:name</th>\n","      <th>Producer code</th>\n","      <th>Section</th>\n","      <th>Activity code</th>\n","      <th>time:timestamp</th>\n","      <th>lifecycle:transition</th>\n","      <th>case:End date</th>\n","      <th>...</th>\n","      <th>case:Treatment code:14</th>\n","      <th>case:Treatment code:15</th>\n","      <th>case:Diagnosis:15</th>\n","      <th>case:Diagnosis:14</th>\n","      <th>case:Diagnosis:11</th>\n","      <th>case:Diagnosis:13</th>\n","      <th>case:Diagnosis:12</th>\n","      <th>case:Diagnosis code:14</th>\n","      <th>case:Diagnosis code:13</th>\n","      <th>case:Diagnosis code:15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Radiotherapy</td>\n","      <td>1</td>\n","      <td>61</td>\n","      <td>1e consult poliklinisch</td>\n","      <td>SRTH</td>\n","      <td>Section 5</td>\n","      <td>410100</td>\n","      <td>2005-01-03</td>\n","      <td>complete</td>\n","      <td>2006-01-04 23:45:36</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Radiotherapy</td>\n","      <td>1</td>\n","      <td>61</td>\n","      <td>administratief tarief       - eerste pol</td>\n","      <td>SRTH</td>\n","      <td>Section 5</td>\n","      <td>419100</td>\n","      <td>2005-01-03</td>\n","      <td>complete</td>\n","      <td>2006-01-04 23:45:36</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nursing ward</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>verlosk.-gynaec. korte kaart kosten-out</td>\n","      <td>SGEH</td>\n","      <td>Section 2</td>\n","      <td>10107</td>\n","      <td>2005-01-05</td>\n","      <td>complete</td>\n","      <td>2006-01-04 23:45:36</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Obstetrics &amp; Gynaecology clinic</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>echografie  - genitalia interna</td>\n","      <td>SGEC</td>\n","      <td>Section 2</td>\n","      <td>339486E</td>\n","      <td>2005-01-05</td>\n","      <td>complete</td>\n","      <td>2006-01-04 23:45:36</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Nursing ward</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1e consult poliklinisch</td>\n","      <td>SGEH</td>\n","      <td>Section 2</td>\n","      <td>410100</td>\n","      <td>2005-01-05</td>\n","      <td>complete</td>\n","      <td>2006-01-04 23:45:36</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 128 columns</p>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":533},"id":"nSny-_IMMSgV","executionInfo":{"status":"ok","timestamp":1753205561767,"user_tz":-120,"elapsed":24,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"b51ac00b-43f2-43d9-ba35-3dcf8fa354ad"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             org:group  Number of executions  Specialism code  \\\n","150286  General Lab Clinical Chemistry                     1               86   \n","150287  General Lab Clinical Chemistry                     1               86   \n","150288  General Lab Clinical Chemistry                     1               86   \n","150289  General Lab Clinical Chemistry                     1               86   \n","150290  General Lab Clinical Chemistry                     1               86   \n","\n","                                 concept:name Producer code    Section  \\\n","150286                                calcium          CHE2  Section 4   \n","150287                               albumine          CHE2  Section 4   \n","150288      screening antistoffen erytrocyten          BLOB  Section 4   \n","150289  differentiatie leukocyten - handmatig          HAEM  Section 4   \n","150290                            ordertarief          CRLA  Section 4   \n","\n","       Activity code time:timestamp lifecycle:transition case:End date  ...  \\\n","150286       377498A     2008-03-20             complete           NaT  ...   \n","150287       378453A     2008-03-20             complete           NaT  ...   \n","150288        378607     2008-03-20             complete           NaT  ...   \n","150289       379000A     2008-03-20             complete           NaT  ...   \n","150290        379999     2008-03-20             complete           NaT  ...   \n","\n","        case:Treatment code:14  case:Treatment code:15  case:Diagnosis:15  \\\n","150286                     NaN                     NaN                NaN   \n","150287                     NaN                     NaN                NaN   \n","150288                     NaN                     NaN                NaN   \n","150289                     NaN                     NaN                NaN   \n","150290                     NaN                     NaN                NaN   \n","\n","       case:Diagnosis:14  case:Diagnosis:11 case:Diagnosis:13  \\\n","150286               NaN                NaN               NaN   \n","150287               NaN                NaN               NaN   \n","150288               NaN                NaN               NaN   \n","150289               NaN                NaN               NaN   \n","150290               NaN                NaN               NaN   \n","\n","        case:Diagnosis:12 case:Diagnosis code:14 case:Diagnosis code:13  \\\n","150286                NaN                    NaN                    NaN   \n","150287                NaN                    NaN                    NaN   \n","150288                NaN                    NaN                    NaN   \n","150289                NaN                    NaN                    NaN   \n","150290                NaN                    NaN                    NaN   \n","\n","       case:Diagnosis code:15  \n","150286                    NaN  \n","150287                    NaN  \n","150288                    NaN  \n","150289                    NaN  \n","150290                    NaN  \n","\n","[5 rows x 128 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>org:group</th>\n","      <th>Number of executions</th>\n","      <th>Specialism code</th>\n","      <th>concept:name</th>\n","      <th>Producer code</th>\n","      <th>Section</th>\n","      <th>Activity code</th>\n","      <th>time:timestamp</th>\n","      <th>lifecycle:transition</th>\n","      <th>case:End date</th>\n","      <th>...</th>\n","      <th>case:Treatment code:14</th>\n","      <th>case:Treatment code:15</th>\n","      <th>case:Diagnosis:15</th>\n","      <th>case:Diagnosis:14</th>\n","      <th>case:Diagnosis:11</th>\n","      <th>case:Diagnosis:13</th>\n","      <th>case:Diagnosis:12</th>\n","      <th>case:Diagnosis code:14</th>\n","      <th>case:Diagnosis code:13</th>\n","      <th>case:Diagnosis code:15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>150286</th>\n","      <td>General Lab Clinical Chemistry</td>\n","      <td>1</td>\n","      <td>86</td>\n","      <td>calcium</td>\n","      <td>CHE2</td>\n","      <td>Section 4</td>\n","      <td>377498A</td>\n","      <td>2008-03-20</td>\n","      <td>complete</td>\n","      <td>NaT</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>150287</th>\n","      <td>General Lab Clinical Chemistry</td>\n","      <td>1</td>\n","      <td>86</td>\n","      <td>albumine</td>\n","      <td>CHE2</td>\n","      <td>Section 4</td>\n","      <td>378453A</td>\n","      <td>2008-03-20</td>\n","      <td>complete</td>\n","      <td>NaT</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>150288</th>\n","      <td>General Lab Clinical Chemistry</td>\n","      <td>1</td>\n","      <td>86</td>\n","      <td>screening antistoffen erytrocyten</td>\n","      <td>BLOB</td>\n","      <td>Section 4</td>\n","      <td>378607</td>\n","      <td>2008-03-20</td>\n","      <td>complete</td>\n","      <td>NaT</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>150289</th>\n","      <td>General Lab Clinical Chemistry</td>\n","      <td>1</td>\n","      <td>86</td>\n","      <td>differentiatie leukocyten - handmatig</td>\n","      <td>HAEM</td>\n","      <td>Section 4</td>\n","      <td>379000A</td>\n","      <td>2008-03-20</td>\n","      <td>complete</td>\n","      <td>NaT</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>150290</th>\n","      <td>General Lab Clinical Chemistry</td>\n","      <td>1</td>\n","      <td>86</td>\n","      <td>ordertarief</td>\n","      <td>CRLA</td>\n","      <td>Section 4</td>\n","      <td>379999</td>\n","      <td>2008-03-20</td>\n","      <td>complete</td>\n","      <td>NaT</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 128 columns</p>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["print(df.columns())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-sLjjTLcfE8e","executionInfo":{"status":"ok","timestamp":1752418603129,"user_tz":-120,"elapsed":68,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"ba289a84-a1e3-4091-b6f2-c34b62237f30"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['org:group', 'Number of executions', 'Specialism code', 'concept:name',\n","       'Producer code', 'Section', 'Activity code', 'time:timestamp',\n","       'lifecycle:transition', 'case:End date',\n","       ...\n","       'case:Treatment code:14', 'case:Treatment code:15', 'case:Diagnosis:15',\n","       'case:Diagnosis:14', 'case:Diagnosis:11', 'case:Diagnosis:13',\n","       'case:Diagnosis:12', 'case:Diagnosis code:14', 'case:Diagnosis code:13',\n","       'case:Diagnosis code:15'],\n","      dtype='object', length=128)\n"]}]},{"cell_type":"markdown","source":["##Event log manipulation"],"metadata":{"id":"SJXt4L79sP3e"}},{"cell_type":"markdown","source":["1. Case outcome KPIs (BPIC2017)"],"metadata":{"id":"qHXefI-h8gJ2"}},{"cell_type":"code","source":["#======= Case Outcome KPIs========\n","\n","# timestamp to datetime\n","df[\"time:timestamp\"] = pd.to_datetime(df[\"time:timestamp\"])\n","\n","# Filter Offer-related events\n","offers = df[df[\"EventOrigin\"] == \"Offer\"].copy()\n","\n","# Sort per time, and chose the last Offer-related event per case\n","offers_sorted = offers.sort_values(\"time:timestamp\")\n","last_offer = offers_sorted.groupby(\"case:concept:name\").tail(1)\n","\n","# Map the last Offer-related event to an outcome\n","outcome_map = {\n","    \"O_Accepted\": \"Accepted\",\n","    \"O_Refused\": \"Refused\",\n","    \"O_Cancelled\": \"Canceled\"\n","}\n","last_offer[\"case:outcome\"] = last_offer[\"concept:name\"].map(outcome_map)\n","\n","# Merge 'case:outcome'\n","df = df.merge(\n","    last_offer[[\"case:concept:name\", \"case:outcome\"]],\n","    on=\"case:concept:name\",\n","    how=\"left\"\n",")\n","\n","# Delete cases without outcome\n","df = df[df[\"case:outcome\"].notna()].copy()\n","\n","# Add binary column on the outcome\n","df[\"case_accepted\"] = (df[\"case:outcome\"] == \"Accepted\").astype(int)\n","df[\"case_refused\"] = (df[\"case:outcome\"] == \"Refused\").astype(int)\n","df[\"case_canceled\"] = (df[\"case:outcome\"] == \"Canceled\").astype(int)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HPHr2VPG27c4","executionInfo":{"status":"ok","timestamp":1752245794704,"user_tz":-120,"elapsed":14551,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"bfe4be48-1922-4872-cc47-92b0eaa4f2ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  return fn(*args, **kwargs)\n"]}]},{"cell_type":"code","source":["print(df[\"case:outcome\"].value_counts())\n","print(df[[\"case_accepted\", \"case_refused\", \"case_canceled\"]].sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mZTL6Qu6_Ohk","executionInfo":{"status":"ok","timestamp":1752245796351,"user_tz":-120,"elapsed":1640,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"d472d37f-426c-446c-a2f3-b5885b2057df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["case:outcome\n","Accepted    533184\n","Canceled    520684\n","Refused     144498\n","Name: count, dtype: int64\n","case_accepted    533184\n","case_refused     144498\n","case_canceled    520684\n","dtype: int64\n"]}]},{"cell_type":"code","source":["if \"Accepted\" in df.columns:\n","    num_missing = df[\"Accepted\"].isna().sum()\n","    total_rows = len(df)\n","    print(f\"'Accepted' column found.\")\n","    print(f\" Missing values: {num_missing}/{total_rows} ({(num_missing/total_rows)*100:.2f}%)\")\n","    print(df[\"Accepted\"].value_counts(dropna=False))\n","else:\n","    print(\" 'Accepted' column not found in the event log.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rbWC5ccRAD-A","executionInfo":{"status":"ok","timestamp":1752245799054,"user_tz":-120,"elapsed":2698,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"b94ff7bf-d94a-47fe-878b-015d9d7a58a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["'Accepted' column found.\n"," Missing values: 1155547/1198366 (96.43%)\n","Accepted\n","NaN      1155547\n","True       30037\n","False      12782\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["xes to csv"],"metadata":{"id":"8cxYJn19v2J-"}},{"cell_type":"code","source":["# select the relevant columns for the df dataset\n","#bpic2017\n","#df = df[[\"case:concept:name\", \"concept:name\", \"org:resource\", \"time:timestamp\", \"Accepted\", \"EventOrigin\", \"case:outcome\",\"case_accepted\", \"case_canceled\", \"case_refused\"]]\n","#df.columns = [\"case_id\", \"event\", \"actor\", \"timestamp\", \"Accepted\", \"EventOrigin\", \"case:outcome\",\"case_accepted\", \"case_canceled\", \"case_refused\"]\n","#df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n","#bpic2012-2019\n","df = df[[\"case:concept:name\", \"concept:name\", \"org:resource\", \"time:timestamp\"]]\n","df.columns = [\"case_id\", \"event\", \"actor\", \"timestamp\"]\n","df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n","#bpic2011\n","#df = df[[\"case:concept:name\", \"concept:name\", \"org:group\", \"time:timestamp\"]]\n","#df.columns = [\"case_id\", \"event\", \"actor\", \"timestamp\"]\n","#df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n","\n","# save as csv\n","#df.to_csv(\"BPIC17.csv\", index=False) #change for datasets\n","df.to_csv(\"BPIC19.csv\", index=False) #change for datasets\n","#df.to_csv(\"BPIC12.csv\", index=False) #change for datasets\n","#df.to_csv(\"BPIC11.csv\", index=False) #change for datasets\n"],"metadata":{"id":"cqPtLn1nKEvr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753204687831,"user_tz":-120,"elapsed":7195,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"f8a1f866-d078-41e4-e085-4c46f436beb9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  return fn(*args, **kwargs)\n"]}]},{"cell_type":"markdown","source":["2. Actor behavior KPIs"],"metadata":{"id":"4LjugZhc8a4O"}},{"cell_type":"code","source":["!pip install polars tqdm\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tXd0QdGCFp9M","executionInfo":{"status":"ok","timestamp":1753204693663,"user_tz":-120,"elapsed":3683,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"ccc46ba0-3eea-4457-e074-49b6da1275f6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: polars in /usr/local/lib/python3.11/dist-packages (1.25.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (4.67.1)\n"]}]},{"cell_type":"code","source":["def classify_actor_behavior(df_dict):\n","    \"\"\" Determines actor behavior classification\"\"\"\n","    classified_edges = []\n","    actor_events = {}\n","    df = pl.DataFrame(df_dict)\n","    df = df.sort([\"case_id\", \"timestamp\"])\n","\n","     #Take two consecutive events\n","    for i in range(len(df) - 1):\n","        e_i, e_j = df.row(i, named=True), df.row(i + 1, named=True)\n","\n","        # Check if the two consecutive events belong to the same case\n","        if e_i[\"case_id\"] != e_j[\"case_id\"]:\n","            continue\n","\n","       # Retrieve actors and timestamps\n","        r_i, r_j = e_i[\"actor\"], e_j[\"actor\"]\n","        t_i, t_j = e_i[\"timestamp\"], e_j[\"timestamp\"]\n","        delta_t = (t_j - t_i).total_seconds() #time between two consecutive events\n","\n","        # Same actor → Continuation or Interruption\n","        if r_i == r_j:\n","            concurrent_cases = any(t_i < e[\"timestamp\"] < t_j for e in actor_events.get(r_i, []))\n","            # event from the dataframa where the actor equals r_i (=r_j is) and the timestamp lies in between ti and tj\n","#decision:\n","#If concurrent_cases NOT empty → Interruption (I).\n","#If concurrent_cases empty → Continuation (C).\n","            behavior = \"I\" if concurrent_cases else \"C\"\n","        else:\n","            # Different actor → Handover\n","            concurrent_cases = any(t_i < e[\"timestamp\"] < t_j for e in actor_events.get(r_j, [])) # event from the dataframe where the actor is r_j and the timestamp lies between ti and tj\n","\n","            if not concurrent_cases:\n","                behavior = \"HI\"\n","            else:\n","                behavior =  \"HB\"\n","\n","\n","        # add result\n","        classified_edges.append((e_i[\"case_id\"], e_i[\"event\"], t_i, e_j[\"event\"], t_j, r_i, r_j, behavior, delta_t))#, e_i[\"Accepted\"], e_j[\"Accepted\"]))\n","\n","        actor_events.setdefault(r_i, []).append({\"timestamp\": t_i, \"case_id\": e_i[\"case_id\"]})\n","        actor_events.setdefault(r_j, []).append({\"timestamp\": t_j, \"case_id\": e_j[\"case_id\"]})\n","\n","\n","    return classified_edges\n"],"metadata":{"id":"jAzKlousG6-8","executionInfo":{"status":"ok","timestamp":1753204695090,"user_tz":-120,"elapsed":14,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["import polars as pl\n","import pandas as pd\n","import multiprocessing as mp\n","from tqdm import tqdm\n","\n","# configuration\n","input_file = \"BPIC19.csv\" #event log\n","output_file = \"actor_behavior_results.csv\"\n","chunk_size = 100000\n","num_workers = max(mp.cpu_count() - 1, 1)\n","\n","#make the output file\n","with open(output_file, \"w\") as f:\n","    f.write(\"case_id,event_i,timestamp_i,event_j,timestamp_j,actor_i,actor_j,behavior,delta_t\\n\")\n","\n","\n","def process_chunk(chunk):\n","    chunk = chunk.astype(str)  # fix mixed types\n","    chunk = pl.DataFrame(chunk)\n","    chunk = chunk.with_columns(pl.col(\"timestamp\").str.to_datetime(strict=False))\n","    results = classify_actor_behavior(chunk.to_dict(as_series=False))\n","\n","    with open(output_file, \"a\") as f:\n","        for row in results:\n","            f.write(\",\".join(map(str, row)) + \"\\n\")\n","    return len(results)\n","\n","# Parallel chunks processing\n","with mp.Pool(num_workers) as pool:\n","    total_rows = sum(1 for _ in open(input_file)) - 1\n","    with tqdm(total=total_rows, unit=\"rows\") as pbar:\n","        for _ in pool.imap_unordered(process_chunk, pd.read_csv(input_file, chunksize=chunk_size)):\n","            pbar.update(chunk_size)\n","    pool.close()\n","    pool.join()\n","\n","\n","print(\"Dataset:\", output_file)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4DTcFzK7RnPq","executionInfo":{"status":"ok","timestamp":1753205061576,"user_tz":-120,"elapsed":346570,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"3d655d2e-575a-4030-f2b7-834e8e0ec866"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["1600000rows [05:45, 4626.07rows/s]"]},{"output_type":"stream","name":"stdout","text":["Dataset: actor_behavior_results.csv\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"actor_behavior_results.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"Z0mw23WJIO8C","executionInfo":{"status":"ok","timestamp":1753205061589,"user_tz":-120,"elapsed":7,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"d63ac846-499a-4da8-bed3-a25c4f989de8"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_3ef756d6-692f-4eec-b7a2-8eb83bf02ef4\", \"actor_behavior_results.csv\", 173762811)"]},"metadata":{}}]},{"cell_type":"markdown","source":["visualizations"],"metadata":{"id":"D4sOvaG1LyNO"}},{"cell_type":"code","source":["!pip install matplotlib seaborn networkx\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LNMUp3s8Iy2E","executionInfo":{"status":"ok","timestamp":1752420316082,"user_tz":-120,"elapsed":3970,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"2d7085df-c926-418d-e665-1157fc35c904"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (3.5)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.5)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import networkx as nx\n","\n","df = pd.read_csv(\"actor_behavior_results.csv\", delimiter=\",\", on_bad_lines=\"skip\")\n","\n","# visualize behacior\n","plt.figure(figsize=(8, 5))\n","sns.countplot(data=df, x=\"behavior\", order=[\"C\", \"I\", \"HI\", \"HB\"], palette=\"coolwarm\")\n","plt.xlabel(\"Behavior type\")\n","plt.ylabel(\"Number\")\n","plt.title(\"Distribution of of behavior types\")\n","plt.show()\n","\n","# delta_t visualization\n","plt.figure(figsize=(8, 5))\n","sns.histplot(df[\"delta_t\"], bins=50, kde=True, color=\"purple\")\n","plt.xlabel(\"Time between events\")\n","plt.ylabel(\"Number\")\n","plt.title(\"Distribution of Time between Events\")\n","plt.xlim(0, df[\"delta_t\"].quantile(0.99))\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UN90ZMP0I5gP","executionInfo":{"status":"ok","timestamp":1752420322128,"user_tz":-120,"elapsed":6042,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"6c856641-7cf2-4e1d-d2f7-59f25663c968"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-8-3867261304.py:10: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.countplot(data=df, x=\"behavior\", order=[\"C\", \"I\", \"HI\", \"HB\"], palette=\"coolwarm\")\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(df.head(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1xQOqja5JF8K","executionInfo":{"status":"ok","timestamp":1752420322139,"user_tz":-120,"elapsed":8,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"fd0ea533-bfde-46e5-88eb-ddd1a38936e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   case_id                 event_i                 timestamp_i  \\\n","0   204320  W_Completeren aanvraag  2012-01-30 10:22:24.748000   \n","1   204320  W_Completeren aanvraag  2012-01-30 10:22:38.432000   \n","2   204320  W_Completeren aanvraag  2012-01-30 11:13:10.422000   \n","3   204320  W_Completeren aanvraag  2012-01-30 11:13:33.091000   \n","4   204320  W_Completeren aanvraag  2012-01-31 12:26:35.568000   \n","5   204320  W_Completeren aanvraag  2012-01-31 12:28:38.333000   \n","6   204320  W_Completeren aanvraag  2012-01-31 20:27:57.382000   \n","7   204320  W_Completeren aanvraag  2012-01-31 20:29:23.923000   \n","8   204320  W_Completeren aanvraag  2012-02-01 20:45:04.922000   \n","9   204320  W_Completeren aanvraag  2012-02-01 20:47:05.328000   \n","\n","                  event_j                 timestamp_j  actor_i  actor_j  \\\n","0  W_Completeren aanvraag  2012-01-30 10:22:38.432000  11180.0  11180.0   \n","1  W_Completeren aanvraag  2012-01-30 11:13:10.422000  11180.0  11180.0   \n","2  W_Completeren aanvraag  2012-01-30 11:13:33.091000  11180.0  11180.0   \n","3  W_Completeren aanvraag  2012-01-31 12:26:35.568000  11180.0  11169.0   \n","4  W_Completeren aanvraag  2012-01-31 12:28:38.333000  11169.0  11169.0   \n","5  W_Completeren aanvraag  2012-01-31 20:27:57.382000  11169.0  11003.0   \n","6  W_Completeren aanvraag  2012-01-31 20:29:23.923000  11003.0  11003.0   \n","7  W_Completeren aanvraag  2012-02-01 20:45:04.922000  11003.0  10933.0   \n","8  W_Completeren aanvraag  2012-02-01 20:47:05.328000  10933.0  10933.0   \n","9  W_Completeren aanvraag  2012-02-02 11:32:26.172000  10933.0  11201.0   \n","\n","  behavior    delta_t  \n","0        C     13.684  \n","1        C   3031.990  \n","2        C     22.669  \n","3       HI  90782.477  \n","4        C    122.765  \n","5       HI  28759.049  \n","6        C     86.541  \n","7       HI  87340.999  \n","8        C    120.406  \n","9       HI  53120.844  \n"]}]},{"cell_type":"code","source":["from IPython.display import display\n","\n","display(df.head(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"OqzXEjtNJJTA","executionInfo":{"status":"ok","timestamp":1753205425646,"user_tz":-120,"elapsed":388,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"d0169a73-2caf-4efa-f4c5-d0353c8a8178"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["            case_id                                event     actor  \\\n","0  2000000000_00001                         SRM: Created  batch_00   \n","1  2000000000_00001                        SRM: Complete  batch_00   \n","2  2000000000_00001               SRM: Awaiting Approval  batch_00   \n","3  2000000000_00001              SRM: Document Completed  batch_00   \n","4  2000000000_00001  SRM: In Transfer to Execution Syst.  batch_00   \n","5  2000000000_00001                         SRM: Ordered  batch_00   \n","6  2000000000_00001          SRM: Change was Transmitted  batch_00   \n","7  2000000000_00001           Create Purchase Order Item  user_000   \n","8  2000000000_00001               Vendor creates invoice      NONE   \n","9  2000000000_00001                 Record Goods Receipt  user_000   \n","\n","            timestamp  \n","0 2018-01-02 12:53:00  \n","1 2018-01-02 13:53:00  \n","2 2018-01-02 13:53:00  \n","3 2018-01-02 13:53:00  \n","4 2018-01-02 13:53:00  \n","5 2018-01-02 13:53:00  \n","6 2018-01-02 13:53:00  \n","7 2018-01-02 13:53:00  \n","8 2018-01-02 22:59:00  \n","9 2018-03-06 06:44:00  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>case_id</th>\n","      <th>event</th>\n","      <th>actor</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Created</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 12:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Complete</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Awaiting Approval</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Document Completed</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: In Transfer to Execution Syst.</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Ordered</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2000000000_00001</td>\n","      <td>SRM: Change was Transmitted</td>\n","      <td>batch_00</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2000000000_00001</td>\n","      <td>Create Purchase Order Item</td>\n","      <td>user_000</td>\n","      <td>2018-01-02 13:53:00</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2000000000_00001</td>\n","      <td>Vendor creates invoice</td>\n","      <td>NONE</td>\n","      <td>2018-01-02 22:59:00</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2000000000_00001</td>\n","      <td>Record Goods Receipt</td>\n","      <td>user_000</td>\n","      <td>2018-03-06 06:44:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"case_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2000000000_00001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"event\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Vendor creates invoice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actor\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"batch_00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-01-02 12:53:00\",\n        \"max\": \"2018-03-06 06:44:00\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"2018-01-02 13:53:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["# Time series generation\n"],"metadata":{"id":"JLlVL-oDL5Nm"}},{"cell_type":"code","source":["import pandas as pd\n","import pm4py\n","\n","# ========================\n","# Load and Prepare Event Log Data\n","# ========================\n","# Read BPIC 2017 event log and extract necessary columns\n","log = pm4py.read_xes(\"BPI_Challenge_2019.xes\")\n","df_eventlog = pm4py.convert_to_dataframe(log)\n","\n","# Ensure timestamps are datetime and extract date\n","df_eventlog[\"time:timestamp\"] = pd.to_datetime(df_eventlog[\"time:timestamp\"], errors=\"coerce\")\n","df_eventlog[\"date\"] = df_eventlog[\"time:timestamp\"].dt.date\n","\n","# ========================\n","# Case Duration Analysis (Throughput Time - TT)\n","# ========================\n","# Compute start, end, and duration (in hours) per case\n","case_durations = df_eventlog.groupby(\"case:concept:name\").agg(\n","    start=(\"time:timestamp\", \"min\"),\n","    end=(\"time:timestamp\", \"max\")\n",")\n","case_durations[\"duration\"] = (case_durations[\"end\"] - case_durations[\"start\"]).dt.total_seconds() / 3600\n","case_durations[\"start_day\"] = case_durations[\"start\"].dt.date\n","\n","# Average case duration per day, renamed to TT\n","TT = case_durations.groupby(\"start_day\")[\"duration\"].mean().rename(\"TT\")\n","\n","# ========================\n","# Daily Resource Involvement Matrix\n","# ========================\n","# Count how often each resource (org:resource) was involved in any event each day\n","daily_resource_matrix = df_eventlog.groupby([\"date\", \"org:resource\"]).size().unstack(fill_value=0) #org:group for BPIC2011\n","\n","# ========================\n","# Resource Behavior Analysis\n","# ========================\n","# This script generates **three resource-related daily behavior metric time series**:\n","# 1. Daily count of each actor behavior (C, I, HI, HB)\n","# 2. Daily total time spent in each actor behavior (based on delta_t)\n","# 3. Daily total resource participation (how often any resource is involved)\n","\n","# Ensure timestamps and date in behavior DataFrame\n","df[\"timestamp_i\"] = pd.to_datetime(df[\"timestamp_i\"], format='mixed', errors='coerce')\n","df[\"timestamp_j\"] = pd.to_datetime(df[\"timestamp_j\"], format='mixed', errors='coerce')\n","df[\"date\"] = df[\"timestamp_i\"].dt.date\n","\n","# Behavior frequency and duration per day\n","top_behaviors = df['behavior'].value_counts().head(4).index.tolist()\n","behavior_daily_count = df.groupby(['date', 'behavior']).size().unstack(fill_value=0)\n","behavior_daily_time = df.groupby(['date', 'behavior'])['delta_t'].sum().unstack(fill_value=0)\n","\n","# Build time series for each behavior\n","all_series = []\n","for behavior in top_behaviors:\n","    if behavior in behavior_daily_count.columns:\n","        count_series = behavior_daily_count[behavior].rename(f\"Count_{behavior}\")\n","        time_series = behavior_daily_time[behavior].rename(f\"Time_{behavior}_seconds\")\n","        all_series.extend([count_series, time_series])\n","\n","# Compute overall resource participation (actor_i + actor_j)\n","df_actor_long = pd.melt(\n","    df,\n","    id_vars=[\"date\"],\n","    value_vars=[\"actor_i\", \"actor_j\"],\n","    var_name=\"actor_type\",\n","    value_name=\"actor\"\n",")\n","daily_resource_participation = df_actor_long.groupby([\"date\", \"actor\"]).size()\n","daily_resource_activity_vector = daily_resource_participation.groupby(\"date\").sum()\n","daily_resource_activity_vector.name = \"Resource_Involvement_Count\"\n","all_series.append(daily_resource_activity_vector)\n","\n","# ========================\n","# Final Time Series Assembly\n","# ========================\n","# Combine all behavior-related time series\n","df_all = pd.concat(all_series, axis=1).sort_index().fillna(0)\n","\n","# Convert durations from seconds to minutes and hours\n","for col in df_all.columns:\n","    if col.startswith(\"Time_\") and col.endswith(\"_seconds\"):\n","        df_all[col.replace(\"_seconds\", \"_minutes\")] = df_all[col] / 60\n","        df_all[col.replace(\"_seconds\", \"_hours\")] = df_all[col] / 3600\n","\n","# Add resource activity matrix (per-resource daily counts)\n","df_final = df_all.join(daily_resource_matrix, how=\"left\").fillna(0)\n","\n","# Add TT (average throughput time per day)\n","df_final = df_final.join(TT, how=\"left\").fillna(0)\n","\n","# ========================\n","# Preview and Save\n","# ========================\n","print(\"Final time series shape:\", df_final.shape)\n","df_final.head()\n","\n","# Save and download (Colab)\n","df_final.to_csv(\"final_time_series.csv\")\n","from google.colab import files\n","files.download(\"final_time_series.csv\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":770,"referenced_widgets":["dc88bc4437e44ff2bce2bbcd4924dcdd","d435fe73dedc4b7b9507cd9a6b9c7dd7","0b8934f053e34b6296df047fdb27bf69","94ed601b12d84179b66ad20920986640","797241bc4d9e42f798f89e141da6d652","de76164f494e4e5ab4e9a09bffb47f21","608ea231a84547f8b3a5104908984c46","09f868e3afef4ac5b237bbe233bad92b","5229a8233c6b45a982aaba3e668690e7","54fc68d018ba48de98962c2d02da3b2e","6861711b79dc459faeffc06c2c7152b3"]},"id":"eXixfDUzQPa6","executionInfo":{"status":"error","timestamp":1753205368665,"user_tz":-120,"elapsed":279291,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}},"outputId":"0869bbc2-8cbb-4492-c6c2-d76638fa67f9"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["parsing log, completed traces ::   0%|          | 0/251734 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dc88bc4437e44ff2bce2bbcd4924dcdd"}},"metadata":{}},{"output_type":"error","ename":"KeyError","evalue":"'timestamp_i'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_fast_slow_function_call\u001b[0;34m(func, *args, **kwargs)\u001b[0m\n\u001b[1;32m    995\u001b[0m         ):\n\u001b[0;32m--> 996\u001b[0;31m             \u001b[0mfast_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfast_kwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_fast_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_fast_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    997\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfast_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfast_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_fast_arg\u001b[0;34m(arg)\u001b[0m\n\u001b[1;32m   1182\u001b[0m     \u001b[0mseen\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1183\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_transform_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"_fsproxy_fast\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_transform_arg\u001b[0;34m(arg, attribute_name, seen)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1108\u001b[0;31m                 return tuple(\n\u001b[0m\u001b[1;32m   1109\u001b[0m                     \u001b[0m_transform_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattribute_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseen\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1108\u001b[0m                 return tuple(\n\u001b[0;32m-> 1109\u001b[0;31m                     \u001b[0m_transform_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattribute_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseen\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m                 )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_transform_arg\u001b[0;34m(arg, attribute_name, seen)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1108\u001b[0;31m                 return tuple(\n\u001b[0m\u001b[1;32m   1109\u001b[0m                     \u001b[0m_transform_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattribute_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseen\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1108\u001b[0m                 return tuple(\n\u001b[0;32m-> 1109\u001b[0;31m                     \u001b[0m_transform_arg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattribute_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseen\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m                 )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_transform_arg\u001b[0;34m(arg, attribute_name, seen)\u001b[0m\n\u001b[1;32m   1063\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_FastSlowProxy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_FastSlowProxyMeta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_FunctionProxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1064\u001b[0;31m         \u001b[0mtyp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattribute_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1065\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtyp\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0m_Unusable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_fsproxy_fast\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    529\u001b[0m         \"\"\"\n\u001b[0;32m--> 530\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_wrapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_slow_to_fast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    531\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_wrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_fsproxy_slow_to_fast\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    191\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_state\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0m_State\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSLOW\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mslow_to_fast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_wrapped\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    193\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fsproxy_wrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/utils/performance_tracking.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 )\n\u001b[0;32m---> 51\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/dataframe.py\u001b[0m in \u001b[0;36mfrom_pandas\u001b[0;34m(obj, nan_as_null)\u001b[0m\n\u001b[1;32m   8631\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 8632\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_pandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnan_as_null\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnan_as_null\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   8633\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/_wrappers/pandas.py\u001b[0m in \u001b[0;36mwrapped_from_pandas_dataframe\u001b[0;34m(dataframe, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1945\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mdataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1946\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moriginal_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/utils/performance_tracking.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 )\n\u001b[0;32m---> 51\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/dataframe.py\u001b[0m in \u001b[0;36mfrom_pandas\u001b[0;34m(cls, dataframe, nan_as_null)\u001b[0m\n\u001b[1;32m   5720\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5721\u001b[0;31m             data = {\n\u001b[0m\u001b[1;32m   5722\u001b[0m                 \u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mas_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol_value\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnan_as_null\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnan_as_null\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/dataframe.py\u001b[0m in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   5721\u001b[0m             data = {\n\u001b[0;32m-> 5722\u001b[0;31m                 \u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mas_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol_value\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnan_as_null\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnan_as_null\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5723\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_value\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/column/column.py\u001b[0m in \u001b[0;36mas_column\u001b[0;34m(arbitrary, nan_as_null, dtype, length)\u001b[0m\n\u001b[1;32m   2862\u001b[0m             )\n\u001b[0;32m-> 2863\u001b[0;31m             return as_column(\n\u001b[0m\u001b[1;32m   2864\u001b[0m                 \u001b[0mpyarrow_array\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/column/column.py\u001b[0m in \u001b[0;36mas_column\u001b[0;34m(arbitrary, nan_as_null, dtype, length)\u001b[0m\n\u001b[1;32m   2729\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCUDF_STRING_DTYPE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2730\u001b[0;31m         \u001b[0mcol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mColumnBase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_arrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marbitrary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/core/column/column.py\u001b[0m in \u001b[0;36mfrom_arrow\u001b[0;34m(cls, array)\u001b[0m\n\u001b[1;32m    894\u001b[0m             result = cls.from_pylibcudf(\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0mplc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_arrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             )\n","\u001b[0;32m/usr/lib/python3.11/functools.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    908\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 909\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    910\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32minterop.pyx\u001b[0m in \u001b[0;36mpylibcudf.interop._from_arrow_table\u001b[0;34m()\u001b[0m\n","\u001b[0;32mtable.pyx\u001b[0m in \u001b[0;36mpylibcudf.table.Table.__init__\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/functools.py\u001b[0m in \u001b[0;36m_method\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    945\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 946\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mtable.pyx\u001b[0m in \u001b[0;36mpylibcudf.table.Table._\u001b[0;34m()\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Fatal CUDA error encountered at: /__w/cudf/cudf/cpp/src/bitmask/null_mask.cu:98: 35 cudaErrorInsufficientDriver CUDA driver version is insufficient for CUDA runtime version","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'timestamp_i'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-13-3255181299.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;31m# Ensure timestamps and date in behavior DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timestamp_i\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timestamp_i\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mixed'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coerce'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timestamp_j\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timestamp_j\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mixed'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coerce'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"date\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"timestamp_i\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    720\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 722\u001b[0;31m         result, _ = _fast_slow_function_call(\n\u001b[0m\u001b[1;32m    723\u001b[0m             \u001b[0;31m# We cannot directly call self here because we need it to be\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    724\u001b[0m             \u001b[0;31m# converted into either the fast or slow object (by\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36m_fast_slow_function_call\u001b[0;34m(func, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1047\u001b[0m             \u001b[0m_slow_function_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1048\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mdisable_module_accelerator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1049\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mslow_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mslow_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1050\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_maybe_wrap_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfast\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1051\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cudf/pandas/fast_slow_proxy.py\u001b[0m in \u001b[0;36mcall_operator\u001b[0;34m(fn, args, kwargs)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcall_operator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'timestamp_i'"]}]},{"cell_type":"code","source":["df_final.head()"],"metadata":{"id":"IieYXJ__XUwF","executionInfo":{"status":"aborted","timestamp":1753205368669,"user_tz":-120,"elapsed":7,"user":{"displayName":"Aurélie Leribaux","userId":"05930531957213541803"}}},"execution_count":null,"outputs":[]}]}